<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Form Interface</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 1rem;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(20px);
            max-width: 500px;
            width: 100%;
            padding: 2.5rem;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1), 0 10px 20px rgba(0,0,0,0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            animation: slideUp 0.6s ease-out;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h1 {
            color: #2c3e50;
            margin-bottom: 2rem;
            font-weight: 700;
            font-size: 1.8rem;
            text-align: center;
        }

        .form-group {
            margin-bottom: 1.5rem;
            position: relative;
        }

        label {
            display: block;
            margin-bottom: 0.5rem;
            color: #555;
            font-weight: 600;
            font-size: 0.9rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        input {
            width: 100%;
            padding: 1rem;
            border: 2px solid #e1e8ed;
            border-radius: 12px;
            font-size: 1rem;
            transition: all 0.3s ease;
            background: rgba(255, 255, 255, 0.8);
        }

        input:focus {
            outline: none;
            border-color: #667eea;
            box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
            transform: translateY(-2px);
        }

        input:hover {
            border-color: #667eea;
        }

        button {
            width: 100%;
            padding: 1rem 2rem;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            font-size: 1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }

        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
        }

        button:active {
            transform: translateY(-1px);
        }

        button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }

        button:hover::before {
            left: 100%;
        }

        .camera-section {
            margin-top: 2rem;
            padding-top: 2rem;
            border-top: 1px solid #e1e8ed;
        }

        video {
            display: none;
            width: 100%;
            border-radius: 12px;
            margin-bottom: 1rem;
        }

        canvas {
            display: none;
        }

        #capturedImage {
            display: none;
            width: 100%;
            border-radius: 12px;
            margin-top: 1rem;
            box-shadow: 0 8px 25px rgba(0,0,0,0.15);
            transition: all 0.3s ease;
        }

        #capturedImage:hover {
            transform: scale(1.02);
        }

        .camera-controls {
            display: flex;
            gap: 1rem;
            margin-top: 1rem;
        }

        .camera-controls button {
            flex: 1;
            padding: 0.8rem;
            font-size: 0.9rem;
        }

        #captureBtn {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }

        #retakeBtn {
            background: linear-gradient(135deg, #ffc107 0%, #fd7e14 100%);
            display: none;
        }

        .status-message {
            margin-top: 1rem;
            padding: 1rem;
            border-radius: 8px;
            text-align: center;
            font-weight: 500;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .status-message.success {
            background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
            color: #155724;
            border: 1px solid #c3e6cb;
        }

        .status-message.error {
            background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
            color: #721c24;
            border: 1px solid #f5c6cb;
        }

        .status-message.show {
            opacity: 1;
        }

        /* Mobile Optimizations */
        @media (max-width: 600px) {
            body {
                padding: 0.5rem;
            }

            .container {
                padding: 1.5rem;
                border-radius: 15px;
                margin: 0;
            }

            h1 {
                font-size: 1.5rem;
                margin-bottom: 1.5rem;
            }

            input {
                padding: 0.8rem;
                font-size: 16px; /* Prevents zoom on iOS */
            }

            button {
                padding: 0.8rem 1.5rem;
                font-size: 0.9rem;
            }

            .camera-controls {
                flex-direction: column;
                gap: 0.5rem;
            }
        }

        /* Dark mode support */
        @media (prefers-color-scheme: dark) {
            body {
                background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
            }

            .container {
                background: rgba(44, 62, 80, 0.95);
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            h1, label {
                color: #ecf0f1;
            }

            input {
                background: rgba(52, 73, 94, 0.8);
                border-color: #34495e;
                color: #ecf0f1;
            }

            input:focus {
                border-color: #3498db;
                box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
            }
        }

        /* Animation for form interactions */
        .form-group {
            animation: fadeInUp 0.6s ease-out forwards;
            opacity: 0;
        }

        .form-group:nth-child(1) { animation-delay: 0.1s; }
        .form-group:nth-child(2) { animation-delay: 0.2s; }
        .form-group:nth-child(3) { animation-delay: 0.3s; }
        .form-group:nth-child(4) { animation-delay: 0.4s; }

        @keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ðŸ“± Smart Form Interface</h1>
        
        <form id="modernForm">
            <div class="form-group">
                <label for="name">Full Name</label>
                <input type="text" id="name" name="name" placeholder="Enter your full name" required>
            </div>

            <div class="form-group">
                <label for="email">Email Address</label>
                <input type="email" id="email" name="email" placeholder="Enter your email" required>
            </div>

            <div class="form-group">
                <label for="phone">Phone Number</label>
                <input type="tel" id="phone" name="phone" placeholder="Enter your phone number">
            </div>

            <button type="submit">Submit Form</button>
        </form>

        <div class="camera-section">
            <h3 style="color: #2c3e50; margin-bottom: 1rem; text-align: center;">ðŸ“¸ Camera Capture</h3>
            <button type="button" id="startCamera">Start Camera</button>
            <video id="video" autoplay playsinline></video>
            <div class="camera-controls">
                <button type="button" id="captureBtn">Capture Photo</button>
                <button type="button" id="retakeBtn">Retake</button>
            </div>
            <canvas id="canvas"></canvas>
            <img id="capturedImage" alt="Captured photo">
        </div>

        <div class="status-message" id="statusMessage"></div>
    </div>

    <script>
        // Form handling
        const form = document.getElementById('modernForm');
        const statusMessage = document.getElementById('statusMessage');

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            showStatus('Form submitted successfully! ðŸŽ‰', 'success');
        });

        // Camera functionality
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const capturedImage = document.getElementById('capturedImage');
        const startCameraBtn = document.getElementById('startCamera');
        const captureBtn = document.getElementById('captureBtn');
        const retakeBtn = document.getElementById('retakeBtn');

        let stream = null;

        startCameraBtn.addEventListener('click', async () => {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        facingMode: 'user',
                        width: { ideal: 1280 },
                        height: { ideal: 720 }
                    } 
                });
                video.srcObject = stream;
                video.style.display = 'block';
                startCameraBtn.style.display = 'none';
                captureBtn.style.display = 'block';
                showStatus('Camera started successfully! ðŸ“·', 'success');
            } catch (err) {
                showStatus('Error accessing camera: ' + err.message, 'error');
            }
        });

        captureBtn.addEventListener('click', () => {
            const context = canvas.getContext('2d');
            canvas.width = video.videoWidth;
            canvas.height = video.videoHeight;
            context.drawImage(video, 0, 0);
            
            const dataURL = canvas.toDataURL('image/png');
            capturedImage.src = dataURL;
            capturedImage.style.display = 'block';
            
            video.style.display = 'none';
            captureBtn.style.display = 'none';
            retakeBtn.style.display = 'block';
            
            showStatus('Photo captured successfully! ðŸ“¸', 'success');
        });

        retakeBtn.addEventListener('click', () => {
            video.style.display = 'block';
            capturedImage.style.display = 'none';
            captureBtn.style.display = 'block';
            retakeBtn.style.display = 'none';
        });

        function showStatus(message, type) {
            statusMessage.textContent = message;
            statusMessage.className = `status-message ${type} show`;
            setTimeout(() => {
                statusMessage.classList.remove('show');
            }, 3000);
        }

        // Enhanced form validation with real-time feedback
        const inputs = document.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('blur', validateField);
            input.addEventListener('input', clearValidation);
        });

        function validateField(e) {
            const field = e.target;
            const value = field.value.trim();
            
            if (field.hasAttribute('required') && !value) {
                field.style.borderColor = '#e74c3c';
                field.style.boxShadow = '0 0 0 3px rgba(231, 76, 60, 0.1)';
            } else if (field.type === 'email' && value && !isValidEmail(value)) {
                field.style.borderColor = '#e74c3c';
                field.style.boxShadow = '0 0 0 3px rgba(231, 76, 60, 0.1)';
            } else {
                field.style.borderColor = '#27ae60';
                field.style.boxShadow = '0 0 0 3px rgba(39, 174, 96, 0.1)';
            }
        }

        function clearValidation(e) {
            const field = e.target;
            field.style.borderColor = '#e1e8ed';
            field.style.boxShadow = 'none';
        }

        function isValidEmail(email) {
            return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
        }

        // Add smooth scrolling for mobile keyboards
        window.addEventListener('resize', () => {
            if (window.innerHeight < 500) {
                document.body.style.paddingTop = '0';
            } else {
                document.body.style.paddingTop = '';
            }
        });
    </script>
</body>
</html>
